// Autogenerated by Frugal Compiler (3.9.5)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING



// ignore_for_file: unused_import
// ignore_for_file: unused_field
import 'dart:async';
import 'dart:typed_data' show Uint8List;

import 'package:thrift/thrift.dart' as thrift;
import 'package:frugal/frugal.dart' as frugal;

import 'package:todo_transport/todo_transport.dart' as t_todo_transport;


const String delimiter = '.';

TodosPublisher todosPublisherFactory(frugal.FScopeProvider provider, {List<frugal.Middleware> middleware}) =>
    TodosPublisher(provider, middleware);

class TodosPublisher {
  frugal.FPublisherTransport transport;
  frugal.FProtocolFactory protocolFactory;
  Map<String, frugal.FMethod> _methods;
  TodosPublisher(frugal.FScopeProvider provider, [List<frugal.Middleware> middleware]) {
    transport = provider.publisherTransportFactory.getTransport();
    protocolFactory = provider.protocolFactory;
    var combined = middleware ?? [];
    combined.addAll(provider.middleware);
    this._methods = {};
    this._methods['TodoCreated'] = frugal.FMethod(this._publishTodoCreated, 'Todos', 'publishTodoCreated', combined);
    this._methods['TodoDeleted'] = frugal.FMethod(this._publishTodoDeleted, 'Todos', 'publishTodoDeleted', combined);
    this._methods['TodoUpdated'] = frugal.FMethod(this._publishTodoUpdated, 'Todos', 'publishTodoUpdated', combined);
  }

  Future open() {
    return transport.open();
  }

  Future close() {
    return transport.close();
  }

  Future publishTodoCreated(frugal.FContext ctx, String account, String membership, t_todo_transport.Todo req) {
    return this._methods['TodoCreated']([ctx, account, membership, req]);
  }

  Future _publishTodoCreated(frugal.FContext ctx, String account, String membership, t_todo_transport.Todo req) async {
    ctx.addRequestHeader('_topic_account', account);
    ctx.addRequestHeader('_topic_membership', membership);
    var op = 'TodoCreated';
    var prefix = '$account.$membership.';
    var topic = '${prefix}Todos$delimiter$op';
    var memoryBuffer = frugal.TMemoryOutputBuffer(transport.publishSizeLimit);
    var oprot = protocolFactory.getProtocol(memoryBuffer);
    var msg = thrift.TMessage(op, thrift.TMessageType.CALL, 0);
    oprot.writeRequestHeader(ctx);
    oprot.writeMessageBegin(msg);
    req.write(oprot);
    oprot.writeMessageEnd();
    // sync in this version but async in v2. Mitigate breaking changes by always awaiting.
    // ignore: await_only_futures
    await transport.publish(topic, memoryBuffer.writeBytes);
  }


  Future publishTodoDeleted(frugal.FContext ctx, String account, String membership, t_todo_transport.Todo req) {
    return this._methods['TodoDeleted']([ctx, account, membership, req]);
  }

  Future _publishTodoDeleted(frugal.FContext ctx, String account, String membership, t_todo_transport.Todo req) async {
    ctx.addRequestHeader('_topic_account', account);
    ctx.addRequestHeader('_topic_membership', membership);
    var op = 'TodoDeleted';
    var prefix = '$account.$membership.';
    var topic = '${prefix}Todos$delimiter$op';
    var memoryBuffer = frugal.TMemoryOutputBuffer(transport.publishSizeLimit);
    var oprot = protocolFactory.getProtocol(memoryBuffer);
    var msg = thrift.TMessage(op, thrift.TMessageType.CALL, 0);
    oprot.writeRequestHeader(ctx);
    oprot.writeMessageBegin(msg);
    req.write(oprot);
    oprot.writeMessageEnd();
    // sync in this version but async in v2. Mitigate breaking changes by always awaiting.
    // ignore: await_only_futures
    await transport.publish(topic, memoryBuffer.writeBytes);
  }


  Future publishTodoUpdated(frugal.FContext ctx, String account, String membership, t_todo_transport.Todo req) {
    return this._methods['TodoUpdated']([ctx, account, membership, req]);
  }

  Future _publishTodoUpdated(frugal.FContext ctx, String account, String membership, t_todo_transport.Todo req) async {
    ctx.addRequestHeader('_topic_account', account);
    ctx.addRequestHeader('_topic_membership', membership);
    var op = 'TodoUpdated';
    var prefix = '$account.$membership.';
    var topic = '${prefix}Todos$delimiter$op';
    var memoryBuffer = frugal.TMemoryOutputBuffer(transport.publishSizeLimit);
    var oprot = protocolFactory.getProtocol(memoryBuffer);
    var msg = thrift.TMessage(op, thrift.TMessageType.CALL, 0);
    oprot.writeRequestHeader(ctx);
    oprot.writeMessageBegin(msg);
    req.write(oprot);
    oprot.writeMessageEnd();
    // sync in this version but async in v2. Mitigate breaking changes by always awaiting.
    // ignore: await_only_futures
    await transport.publish(topic, memoryBuffer.writeBytes);
  }
}


TodosSubscriber todosSubscriberFactory(frugal.FScopeProvider provider, {List<frugal.Middleware> middleware}) =>
    TodosSubscriber(provider, middleware);

class TodosSubscriber {
  final frugal.FScopeProvider provider;
  final List<frugal.Middleware> _middleware;

  TodosSubscriber(this.provider, [List<frugal.Middleware> middleware])
      : this._middleware = middleware ?? [] {
    this._middleware.addAll(provider.middleware);
}

  Future<frugal.FSubscription> subscribeTodoCreated(String account, String membership, dynamic onTodo(frugal.FContext ctx, t_todo_transport.Todo req)) async {
    var op = 'TodoCreated';
    var prefix = '$account.$membership.';
    var topic = '${prefix}Todos$delimiter$op';
    var transport = provider.subscriberTransportFactory.getTransport();
    await transport.subscribe(topic, _recvTodoCreated(op, provider.protocolFactory, onTodo));
    return frugal.FSubscription(topic, transport);
  }

  frugal.FAsyncCallback _recvTodoCreated(String op, frugal.FProtocolFactory protocolFactory, dynamic onTodo(frugal.FContext ctx, t_todo_transport.Todo req)) {
    frugal.FMethod method = frugal.FMethod(onTodo, 'Todos', 'subscribeTodo', this._middleware);
    callbackTodoCreated(thrift.TTransport transport) {
      var iprot = protocolFactory.getProtocol(transport);
      var ctx = iprot.readRequestHeader();
      var tMsg = iprot.readMessageBegin();
      if (tMsg.name != op) {
        thrift.TProtocolUtil.skip(iprot, thrift.TType.STRUCT);
        iprot.readMessageEnd();
        throw thrift.TApplicationError(
        frugal.FrugalTApplicationErrorType.UNKNOWN_METHOD, tMsg.name);
      }
      t_todo_transport.Todo req = t_todo_transport.Todo();
      req.read(iprot);
      iprot.readMessageEnd();
      method([ctx, req]);
    }
    return callbackTodoCreated;
  }


  Future<frugal.FSubscription> subscribeTodoDeleted(String account, String membership, dynamic onTodo(frugal.FContext ctx, t_todo_transport.Todo req)) async {
    var op = 'TodoDeleted';
    var prefix = '$account.$membership.';
    var topic = '${prefix}Todos$delimiter$op';
    var transport = provider.subscriberTransportFactory.getTransport();
    await transport.subscribe(topic, _recvTodoDeleted(op, provider.protocolFactory, onTodo));
    return frugal.FSubscription(topic, transport);
  }

  frugal.FAsyncCallback _recvTodoDeleted(String op, frugal.FProtocolFactory protocolFactory, dynamic onTodo(frugal.FContext ctx, t_todo_transport.Todo req)) {
    frugal.FMethod method = frugal.FMethod(onTodo, 'Todos', 'subscribeTodo', this._middleware);
    callbackTodoDeleted(thrift.TTransport transport) {
      var iprot = protocolFactory.getProtocol(transport);
      var ctx = iprot.readRequestHeader();
      var tMsg = iprot.readMessageBegin();
      if (tMsg.name != op) {
        thrift.TProtocolUtil.skip(iprot, thrift.TType.STRUCT);
        iprot.readMessageEnd();
        throw thrift.TApplicationError(
        frugal.FrugalTApplicationErrorType.UNKNOWN_METHOD, tMsg.name);
      }
      t_todo_transport.Todo req = t_todo_transport.Todo();
      req.read(iprot);
      iprot.readMessageEnd();
      method([ctx, req]);
    }
    return callbackTodoDeleted;
  }


  Future<frugal.FSubscription> subscribeTodoUpdated(String account, String membership, dynamic onTodo(frugal.FContext ctx, t_todo_transport.Todo req)) async {
    var op = 'TodoUpdated';
    var prefix = '$account.$membership.';
    var topic = '${prefix}Todos$delimiter$op';
    var transport = provider.subscriberTransportFactory.getTransport();
    await transport.subscribe(topic, _recvTodoUpdated(op, provider.protocolFactory, onTodo));
    return frugal.FSubscription(topic, transport);
  }

  frugal.FAsyncCallback _recvTodoUpdated(String op, frugal.FProtocolFactory protocolFactory, dynamic onTodo(frugal.FContext ctx, t_todo_transport.Todo req)) {
    frugal.FMethod method = frugal.FMethod(onTodo, 'Todos', 'subscribeTodo', this._middleware);
    callbackTodoUpdated(thrift.TTransport transport) {
      var iprot = protocolFactory.getProtocol(transport);
      var ctx = iprot.readRequestHeader();
      var tMsg = iprot.readMessageBegin();
      if (tMsg.name != op) {
        thrift.TProtocolUtil.skip(iprot, thrift.TType.STRUCT);
        iprot.readMessageEnd();
        throw thrift.TApplicationError(
        frugal.FrugalTApplicationErrorType.UNKNOWN_METHOD, tMsg.name);
      }
      t_todo_transport.Todo req = t_todo_transport.Todo();
      req.read(iprot);
      iprot.readMessageEnd();
      method([ctx, req]);
    }
    return callbackTodoUpdated;
  }
}

