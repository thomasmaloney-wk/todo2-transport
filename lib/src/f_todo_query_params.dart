// Autogenerated by Frugal Compiler (3.9.5)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

// ignore_for_file: unused_import
// ignore_for_file: unused_field
import 'dart:typed_data' show Uint8List;

import 'package:collection/collection.dart';
import 'package:thrift/thrift.dart' as thrift;
import 'package:todo_transport/todo_transport.dart' as t_todo_transport;

class TodoQueryParams implements thrift.TBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('TodoQueryParams');
  static final thrift.TField _INCLUDE_PUBLIC_FIELD_DESC = thrift.TField('includePublic', thrift.TType.BOOL, 1);
  static final thrift.TField _INCLUDE_PRIVATE_FIELD_DESC = thrift.TField('includePrivate', thrift.TType.BOOL, 2);
  static final thrift.TField _INCLUDE_COMPLETE_FIELD_DESC = thrift.TField('includeComplete', thrift.TType.BOOL, 3);
  static final thrift.TField _INCLUDE_INCOMPLETE_FIELD_DESC = thrift.TField('includeIncomplete', thrift.TType.BOOL, 4);

  bool _includePublic = false;
  static const int INCLUDEPUBLIC = 1;
  bool _includePrivate = false;
  static const int INCLUDEPRIVATE = 2;
  bool _includeComplete = false;
  static const int INCLUDECOMPLETE = 3;
  bool _includeIncomplete = false;
  static const int INCLUDEINCOMPLETE = 4;

  bool __isset_includePublic = false;
  bool __isset_includePrivate = false;
  bool __isset_includeComplete = false;
  bool __isset_includeIncomplete = false;

  TodoQueryParams();

  bool get includePublic => this._includePublic;

  set includePublic(bool includePublic) {
    this._includePublic = includePublic;
    this.__isset_includePublic = true;
  }

  bool isSetIncludePublic() => this.__isset_includePublic;

  unsetIncludePublic() {
    this.__isset_includePublic = false;
  }

  bool get includePrivate => this._includePrivate;

  set includePrivate(bool includePrivate) {
    this._includePrivate = includePrivate;
    this.__isset_includePrivate = true;
  }

  bool isSetIncludePrivate() => this.__isset_includePrivate;

  unsetIncludePrivate() {
    this.__isset_includePrivate = false;
  }

  bool get includeComplete => this._includeComplete;

  set includeComplete(bool includeComplete) {
    this._includeComplete = includeComplete;
    this.__isset_includeComplete = true;
  }

  bool isSetIncludeComplete() => this.__isset_includeComplete;

  unsetIncludeComplete() {
    this.__isset_includeComplete = false;
  }

  bool get includeIncomplete => this._includeIncomplete;

  set includeIncomplete(bool includeIncomplete) {
    this._includeIncomplete = includeIncomplete;
    this.__isset_includeIncomplete = true;
  }

  bool isSetIncludeIncomplete() => this.__isset_includeIncomplete;

  unsetIncludeIncomplete() {
    this.__isset_includeIncomplete = false;
  }

  @override
  getFieldValue(int fieldID) {
    switch (fieldID) {
      case INCLUDEPUBLIC:
        return this.includePublic;
      case INCLUDEPRIVATE:
        return this.includePrivate;
      case INCLUDECOMPLETE:
        return this.includeComplete;
      case INCLUDEINCOMPLETE:
        return this.includeIncomplete;
      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  @override
  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case INCLUDEPUBLIC:
        if (value == null) {
          unsetIncludePublic();
        } else {
          this.includePublic = value as bool;
        }
        break;

      case INCLUDEPRIVATE:
        if (value == null) {
          unsetIncludePrivate();
        } else {
          this.includePrivate = value as bool;
        }
        break;

      case INCLUDECOMPLETE:
        if (value == null) {
          unsetIncludeComplete();
        } else {
          this.includeComplete = value as bool;
        }
        break;

      case INCLUDEINCOMPLETE:
        if (value == null) {
          unsetIncludeIncomplete();
        } else {
          this.includeIncomplete = value as bool;
        }
        break;

      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if the field corresponding to fieldID is set (has been assigned a value) and false otherwise
  @override
  bool isSet(int fieldID) {
    switch (fieldID) {
      case INCLUDEPUBLIC:
        return isSetIncludePublic();
      case INCLUDEPRIVATE:
        return isSetIncludePrivate();
      case INCLUDECOMPLETE:
        return isSetIncludeComplete();
      case INCLUDEINCOMPLETE:
        return isSetIncludeIncomplete();
      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        case INCLUDEPUBLIC:
          if (field.type == thrift.TType.BOOL) {
            this.includePublic = iprot.readBool();
            this.__isset_includePublic = true;
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case INCLUDEPRIVATE:
          if (field.type == thrift.TType.BOOL) {
            this.includePrivate = iprot.readBool();
            this.__isset_includePrivate = true;
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case INCLUDECOMPLETE:
          if (field.type == thrift.TType.BOOL) {
            this.includeComplete = iprot.readBool();
            this.__isset_includeComplete = true;
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case INCLUDEINCOMPLETE:
          if (field.type == thrift.TType.BOOL) {
            this.includeIncomplete = iprot.readBool();
            this.__isset_includeIncomplete = true;
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_INCLUDE_PUBLIC_FIELD_DESC);
    oprot.writeBool(this.includePublic);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_INCLUDE_PRIVATE_FIELD_DESC);
    oprot.writeBool(this.includePrivate);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_INCLUDE_COMPLETE_FIELD_DESC);
    oprot.writeBool(this.includeComplete);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_INCLUDE_INCOMPLETE_FIELD_DESC);
    oprot.writeBool(this.includeIncomplete);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @override
  String toString() {
    StringBuffer ret = StringBuffer('TodoQueryParams(');

    ret.write('includePublic:');
    ret.write(this.includePublic);

    ret.write(', ');
    ret.write('includePrivate:');
    ret.write(this.includePrivate);

    ret.write(', ');
    ret.write('includeComplete:');
    ret.write(this.includeComplete);

    ret.write(', ');
    ret.write('includeIncomplete:');
    ret.write(this.includeIncomplete);

    ret.write(')');

    return ret.toString();
  }

  @override
  bool operator ==(Object o) {
    if (o is TodoQueryParams) {
      return this.includePublic == o.includePublic &&
        this.includePrivate == o.includePrivate &&
        this.includeComplete == o.includeComplete &&
        this.includeIncomplete == o.includeIncomplete;
    }
    return false;
  }

  @override
  int get hashCode {
    var value = 17;
    value = (value * 31) ^ this.includePublic.hashCode;
    value = (value * 31) ^ this.includePrivate.hashCode;
    value = (value * 31) ^ this.includeComplete.hashCode;
    value = (value * 31) ^ this.includeIncomplete.hashCode;
    return value;
  }

  TodoQueryParams clone({
    bool includePublic,
    bool includePrivate,
    bool includeComplete,
    bool includeIncomplete,
  }) {
    return TodoQueryParams()
      ..includePublic = includePublic ?? this.includePublic
      ..includePrivate = includePrivate ?? this.includePrivate
      ..includeComplete = includeComplete ?? this.includeComplete
      ..includeIncomplete = includeIncomplete ?? this.includeIncomplete;
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }
}
